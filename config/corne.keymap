// vim: filetype=c
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUM 1
#define SYM 2

/ {
      behaviors {
        hml: homerow_mods_left_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10>;
        };
        hmr:  homerow_mods_right_hand {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4>;
        };
      };


      keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |      |  Q  |  W  |  E  |  R  |  T    |   |  Y  |  U   |  I  |  O  |  P  |      |
// |      |  A  |  S  |  D  |  F  |  G    |   |  H  |  J   |  K  |  L  |  ;  |      |
// |      |  Z  |  X  |  C  |  V  |  B    |   |  N  |  M   |  ,  |  .  |  /  |      |
//                    | ESC | TAB | LSHFT |   | ENT | BKSP | RET |
                        bindings = <
   &trans &kp Q        &kp W       &kp E       &kp R       &kp T     &kp Y &kp U       &kp I       &kp O       &kp P           &trans
   &trans &hml LSHFT A &hml LCTL S &hml LALT D &hml LGUI F &kp G     &kp H &hmr LGUI J &hmr LALT K &hmr RCTL L &hmr RSHFT SEMI &trans
   &trans &kp Z        &kp X       &kp C       &kp V       &kp B     &kp N &kp M       &kp COMMA   &kp DOT     &kp FSLH        &trans
                                       &kp ESC &kp TAB &lt NUM RET   &kp SPACE &kp BSPC &kp RET
                        >;
                };
                number_layer {
// ,-----------------------------------------------------------------------------------.
// |      |      |      |      |      |     |   |  /  |   7  |   8  |   9  |   -  |      |
// |      |      |      |      |      |     |   |  *  |   4  |   5  |   6  |   +  |      |
// |      |      |      |      |      |     |   |     |   1  |   2  |   3  | BKSP |      |
//                      |      |      |     |   | RET |   0  |   .  |
                        bindings = <
   &trans &trans &trans &trans &trans &trans    &kp SLASH &kp N7 &kp N8 &kp N9 &kp MINUS &trans
   &trans &trans &trans &trans &trans &trans    &kp ASTRK &kp N4 &kp N5 &kp N6 &kp PLUS  &trans
   &trans &trans &trans &trans &trans &trans    &trans    &kp N1 &kp N2 &kp N3 &kp BSPC  &trans
                        &trans &trans &trans    &kp RET   &kp N0 &kp DOT

                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};

//   &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
//   &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
//   &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
//                        &trans &trans &trans    &trans &trans &trans

